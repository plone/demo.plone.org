name: Reusable Frontend CI

on:
  workflow_call:
    inputs:
      base-tag:
        required: true
        type: string
      image-name-prefix:
        required: true
        type: string
      image-name-suffix:
        required: true
        type: string
      node-version:
        required: true
        type: string
      volto-version:
        required: true
        type: string
      docker-file:
        type: string
        default: Dockerfile
      build-dir:
        type: string
        default: frontend

defaults:
  run:
    working-directory: ./frontend

jobs:
  code-analysis:
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Use Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Enable corepack
        run: |
          npm i -g corepack@latest
          corepack enable

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: make install

      - name: Linting
        id: lint
        if: ${{ success() || failure() }}
        run: make lint

      - name: i18n sync
        id: i18n
        if: ${{ success() || failure() }}
        run: make ci-i18n

      - name: Unit Tests
        id: unit
        if: ${{ success() || failure() }}
        run: make test

      - name: Report
        if: ${{ success() || failure() }}
        run: |
          echo '# Code Analysis' >> $GITHUB_STEP_SUMMARY
          echo '| Test | Status |' >> $GITHUB_STEP_SUMMARY
          echo '| --- | --- |' >> $GITHUB_STEP_SUMMARY
          echo '| Lint | ${{ steps.lint.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
          echo '| i18n | ${{ steps.i18n.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY
          echo '| Unit Tests | ${{ steps.unit.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY

  release:
    runs-on: ubuntu-latest
    # needs:
    #  - code-analysis
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.image-name-prefix }}-${{ inputs.image-name-suffix }}
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 ${{ inputs.image-name-prefix }}-${{ inputs.image-name-suffix }}:${{ inputs.base-tag }}
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest
            type=pep440,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/')}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: ${{ inputs.build-dir }}/
          file: ${{ inputs.build-dir}}/${{ inputs.docker-file }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VOLTO_VERSION=${{ inputs.volto-version }}
